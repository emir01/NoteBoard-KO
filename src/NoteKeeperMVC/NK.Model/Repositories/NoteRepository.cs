using System;
using System.Data;
using System.Linq;
using NK.Model.Context;
using NK.Model.Entities;
using NK.Model.Repositories.Interface;

namespace NK.Model.Repositories
{
    public class NoteRepository:INoteRepository
    {
        #region Properies

        private readonly NoteContext _noteContext;

        #endregion

        #region Constructor

        public NoteRepository()
        {
            // Create a new note context ( generated by EF)
            _noteContext = new NoteContext();

            // Disable proxy generation for what appears to be a bug with the
            // serialization when returning the data via json.
            _noteContext.Configuration.ProxyCreationEnabled = false;
        }

        #endregion

        #region Public Methods
        

        /// <summary>
        /// Return a queryable list of all notes. This queryable can be used to further filter down notes 
        /// based on specific parameters.
        /// </summary>
        /// <returns>Queryable collection of Note objects</returns>
        public IQueryable<Note> GetAll()
        {
            var notes = _noteContext.Notes.Include("Board");
            return notes;
        }

        /// <summary>
        ///  Return a single note based on the passed in note id.
        /// </summary>
        /// <param name="noteId">The id of the note that will be retrieved</param>
        /// <returns><see cref="Note"/> object of null if there is no such note.</returns>
        public Note GetNote(Guid noteId)
        {
            var note = _noteContext.Notes.FirstOrDefault(x => x.Id == noteId);
            return note;
        }

        /// <summary>
        /// Stores the passed in note information. If a note exsists with the passed in note id it will get updated. If a note does not exsist 
        /// with the passed in note id or the id is Guid.Empty a new note will be created. 
        /// </summary>
        /// <param name="note">The note object that will be stored in the database, either created or updated information</param>
        /// <returns>The stored <see cref="Note"/> object</returns>
        public Note SaveOrUpdateNote(Note note)
        {
            // If the guid is empty than we save a new note.
            if (note.Id == Guid.Empty)
            {
                note.Id = Guid.NewGuid();
                note = _noteContext.Notes.Add(note);

                // Make sure to set the board as exsisting and not try to craete a new board
                _noteContext.Boards.Attach(note.Board);
                _noteContext.Entry(note.Board).State = EntityState.Unchanged;
            }
            else
            {
                // if the passed in note alreasy has a guid it has been created before
                // so we atach it as state modified.
                _noteContext.Notes.Attach(note);
                _noteContext.Entry(note).State = EntityState.Modified;

                // Make sure to set the board as exsisting and not try to craete a new board
                _noteContext.Boards.Attach(note.Board);
                _noteContext.Entry(note.Board).State = EntityState.Unchanged;
            }

            _noteContext.SaveChanges();
            return note;
        }

        /// <summary>
        /// Remove a note from the database with the given noteId
        /// </summary>
        /// <param name="noteId">The unique identifier of the note that will be removed.</param>
        /// <returns>Boolean value indicating the success of the operation.</returns>
        public bool DeleteNote(Guid noteId)
        {
            // Check if such a note exsists
            var noteToRemove = GetNote(noteId);

            // If it does remove it.
            if (noteToRemove != null)
            {
                _noteContext.Notes.Remove(noteToRemove);
                _noteContext.SaveChanges();
                return true;
            }

            return true;
        }

        #endregion
    }
}
